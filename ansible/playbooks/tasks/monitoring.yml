---
- name: Install Grafana and Prometheus
  hosts: all
  become: yes

  tasks:
    - name: Install grafana dependencies
      package:
        name:
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - wget
        update_cache: true
        cache_valid_time: 3600

    - name: Add Grafana repository and GPG key
      shell: |
        wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | tee /etc/apt/keyrings/grafana.gpg > /dev/null
        echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" |
        tee -a /etc/apt/sources.list.d/grafana.list
        apt-get update -y

    - name: Install Grafana
      package:
        name: grafana

    - name: Copy Grafana configuration
      copy:
        src: "/vagrant/config/monitoring/grafana/grafana.ini"
        dest: "/etc/grafana/grafana.ini"
        remote_src: yes

    - name: Restart Grafana service
      service:
        name: grafana-server
        state: restarted

    - name: Install Prometheus
      package:
        name: prometheus

    - name: Copy Prometheus configuration
      copy:
        src: "/vagrant/config/monitoring/prometheus/prometheus.yml"
        dest: "/etc/prometheus/prometheus.yml"
        remote_src: yes

    - name: Restart Prometheus service
      service:
        name: prometheus
        state: restarted

    - name: Create /var/lib/grafana/dashboards directory
      file:
        path: /var/lib/grafana/dashboards
        state: directory
        mode: '0755'

    - name: Create /etc/grafana/provisioning/dashboards directory
      file:
        path: /etc/grafana/provisioning/dashboards
        state: directory
        mode: '0755'

    - name: Copy Grafana dashboard JSON
      copy:
        src: "/vagrant/config/monitoring/grafana/dashboard.json"
        dest: "/var/lib/grafana/dashboards/dashboard.json"
        remote_src: true

    - name: Copy Grafana dashboard provisioning
      copy:
        src: "/vagrant/config/monitoring/grafana/dashboard.yml"
        dest: "/etc/grafana/provisioning/dashboards/dashboard.yml"
        remote_src: true

    - name: Configure Grafana dashboard provisioning
      copy:
        content: |
          apiVersion: 1
          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: 'file'
              disableDeletion: false
              editable: false
              options:
                path: /var/lib/grafana/dashboards
        dest: "/etc/grafana/provisioning/dashboards/dashboard.yml"

    - name: Set correct ownership for dashboard JSON
      file:
        path: "/var/lib/grafana/dashboards/dashboard.json"
        owner: grafana
        group: grafana
        mode: '0644'

    - name: Restart Grafana server to apply configurations
      service:
        name: grafana-server
        state: restarted

    - name: Create directory for Grafana data sources if not exist
      file:
        path: "/etc/grafana/provisioning/datasources"
        state: directory

    - name: Copy Grafana data source configuration
      copy:
        src: "/vagrant/config/monitoring/grafana/datasources.yml"
        dest: "/etc/grafana/provisioning/datasources/datasources.yml"
        remote_src: true

    - name: Restart Grafana to apply data source configuration
      service:
        name: grafana-server
        state: restarted

    # Download apache_exporter tarball
    - name: Download apache_exporter tarball
      ansible.builtin.get_url:
        url: https://github.com/Lusitaniae/apache_exporter/releases/download/v1.0.9/apache_exporter-1.0.9.linux-amd64.tar.gz
        dest: /tmp/apache_exporter-1.0.9.linux-amd64.tar.gz

    # Extract apache_exporter tarball
    - name: Extract apache_exporter tarball
      ansible.builtin.unarchive:
        src: /tmp/apache_exporter-1.0.9.linux-amd64.tar.gz
        dest: /tmp/
        remote_src: true

    # Create apache_exporter user
    - name: Create apache_exporter user
      ansible.builtin.user:
        name: apache_exporter
        shell: /bin/false
        system: true

    # Move apache_exporter binary to /usr/local/bin
    - name: Move apache_exporter binary to /usr/local/bin
      ansible.builtin.copy:
        src: /tmp/apache_exporter-1.0.9.linux-amd64/apache_exporter
        dest: /usr/local/bin/apache_exporter
        remote_src: true
        owner: apache_exporter
        group: apache_exporter
        mode: '0755'

    - name: Set correct ownership for apache_exporter binary
      file:
        path: /usr/local/bin/apache_exporter
        owner: apache_exporter
        group: apache_exporter
        mode: '0755'

    # Create systemd service for apache_exporter
    - name: Create systemd service for apache_exporter
      ansible.builtin.copy:
        dest: /etc/systemd/system/apache_exporter.service
        content: |
          [Unit]
          Description=Apache Exporter
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=apache_exporter
          Group=apache_exporter
          Type=simple
          ExecStart=/usr/local/bin/apache_exporter --scrape_uri=http://localhost/server-status?auto
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
      notify: Reload systemd

    # Ensure apache_exporter is enabled and running
    - name: Ensure apache_exporter is enabled and running
      ansible.builtin.systemd:
        name: apache_exporter
        enabled: true
        state: started

    # Restart Prometheus service
    - name: Restart Prometheus service
      ansible.builtin.systemd:
        name: prometheus
        state: restarted

  handlers:
    - name: Reload systemd
      ansible.builtin.shell:
        cmd: systemctl daemon-reload
    - name: Add apache exporter
      shell: |
        systemctl daemon-reload
        systemctl enable apache_exporter
        systemctl start apache_exporter
        systemctl restart prometheus






